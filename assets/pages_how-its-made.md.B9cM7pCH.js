import{_ as e,I as o,J as t,au as a}from"./chunks/framework.BdEz2lsW.js";const f=JSON.parse(`{"title":"How it's made","description":"","frontmatter":{},"headers":[],"relativePath":"pages/how-its-made.md","filePath":"pages/how-its-made.md"}`),i={name:"pages/how-its-made.md"},s=a('<h1 id="how-it-s-made" tabindex="-1">How it&#39;s made <a class="header-anchor" href="#how-it-s-made" aria-label="Permalink to &quot;How it&#39;s made&quot;">​</a></h1><h2 id="original-inspiration" tabindex="-1">Original Inspiration <a class="header-anchor" href="#original-inspiration" aria-label="Permalink to &quot;Original Inspiration&quot;">​</a></h2><p>The original inspiration for <code>ivue</code> comes from <code>MobX</code> React state management library, where something similar is attempted to create a class based reactive observable architecture.</p><h2 id="epiphany" tabindex="-1">Epiphany <a class="header-anchor" href="#epiphany" aria-label="Permalink to &quot;Epiphany&quot;">​</a></h2><p>After building several ports from <code>MobX</code> state management library to <code>VueJS</code> to reactivity system I realized that Vue itself is far superior in its design and performance and can solve the same problem without relying on second hand-library, but for that my evolution of understanding of how JavaScript getters and setters work needed to happen.</p><p>And one lucky and sunny day driving back from work in an eureka moment of light it occurred to me how to use Vue 3 computeds in place of getters in classes (Yes, apparently my brain does coding while driving a car).</p><p><code>ivue</code> relies on this very simple discovery of how to elegantly convert getters into Vue 3 computeds.</p><h2 id="simplicity" tabindex="-1">Simplicity <a class="header-anchor" href="#simplicity" aria-label="Permalink to &quot;Simplicity&quot;">​</a></h2><p>After many iterations where I created a whole inversion of control library for <code>ivue</code>, using lots of different decorators and event Traits, I realized that simplicity is paramount to good architecture.</p><p>In that sweep of clarity, I got rid of 95% of the code that was just extra stuff and not the essence and left only <code>3</code> core functions: <code>ivue()</code>, <code>.init()</code>, <code>.toRefs()</code> only which are necessary to do everything <code>ivue</code> is set out to do.</p><p>Use Composition API composables inside <code>.init()</code> function.</p><h2 id="minimalism" tabindex="-1">Minimalism <a class="header-anchor" href="#minimalism" aria-label="Permalink to &quot;Minimalism&quot;">​</a></h2><p>Thus <code>ivue</code> has minimal surface area of the API making it very robust and easy to test. By default <code>ivue</code> does not rely on decorators, though you can use decorators if you wish to.</p><h2 id="the-rest-is-up-to-you" tabindex="-1">The Rest is Up To You <a class="header-anchor" href="#the-rest-is-up-to-you" aria-label="Permalink to &quot;The Rest is Up To You&quot;">​</a></h2><p><code>ivue</code> is like a small mustard seed core for the big tree trunk of Class Based Reactive applications to be built around it, that&#39;s why the path of utter simplicity was chosen. Everything else like an Inversion of Control (IOC) system, Traits, Mixins, Decorators can be built around the core <code>ivue</code> architecture and is up to the community of enthusiastic open source contributors, please share with us your vision of how you and all of can use <code>ivue</code> better.</p>',15),r=[s];function n(c,d,l,h,u,p){return o(),t("div",null,r)}const y=e(i,[["render",n]]);export{f as __pageData,y as default};
