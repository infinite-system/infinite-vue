import{_ as s,I as i,J as a,au as n}from"./chunks/framework.BdEz2lsW.js";const c=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{},"headers":[],"relativePath":"pages/getting-started.md","filePath":"pages/getting-started.md"}'),t={name:"pages/getting-started.md"},l=n(`<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h1><h2 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-label="Permalink to &quot;Install&quot;">​</a></h2><p>The only dependency for <code>ivue</code> is Vue 3, so it is easy to get started.</p><p>In your terminal install <code>ivue</code> using:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes one-light dracula-soft vp-code" style="--shiki-light:#383A42;--shiki-dark:#f6f6f4;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282A36;" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"># yarn</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;"> ivue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"># npm</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;"> i</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;"> ivue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"># pnpm</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;"> i</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;"> ivue</span></span></code></pre></div><h2 id="install-by-copying" tabindex="-1">Install by Copying <a class="header-anchor" href="#install-by-copying" aria-label="Permalink to &quot;Install by Copying&quot;">​</a></h2><p><code>ivue</code> is designed to be easily shareable and installable so if you are running TypeScript, you can just copy the <code>ivue.ts</code> into your repo and you are done:</p><details class="details custom-block"><summary>Click to expand the latest <code>ivue</code> source code to copy</summary><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-zyaMc" id="tab-dgyUEvt" checked><label for="tab-dgyUEvt">ivue.ts</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes one-light dracula-soft vp-code" style="--shiki-light:#383A42;--shiki-dark:#f6f6f4;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282A36;" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/* eslint-disable @typescript-eslint/ban-types */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/* eslint-disable @typescript-eslint/no-explicit-any */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">import</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">ComputedRef</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">ExtractPropTypes</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">Ref</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">ToRef</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">vue</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">computed</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">reactive</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">ref</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">shallowRef</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">toRef</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">vue</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">import</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> { </span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Ref</span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;"> as</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;"> DemiRef</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">vue-demi</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/** Types */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * IVue core reactive instance type with an extended .toRefs() method added.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> IVue</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> InstanceType</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  toRefs</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> IVueToRefsFn</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Type definition for \`.toRefs()\` method converts reactive class properties to composable .value properties.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * But if props = true OR unwrap = true is specified, the refs will be unwrapped refs to be able to be merged with the the root class properties without losing reactivity.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> IVueToRefsFn</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">P</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> keyof</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> InstanceType</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;&gt;(</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">props</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> P</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[])</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Pick</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    IVueRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">InstanceType</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;&gt;,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    P</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  &gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">P</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> keyof</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> InstanceType</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;&gt;(</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">props</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> P</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[], </span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">unwrap</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Pick</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    IVueRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">InstanceType</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;&gt;,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    P</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  &gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">P</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> keyof</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> InstanceType</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;&gt;(</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">props</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> P</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[], </span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">unwrap</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Pick</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    InstanceType</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    P</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  &gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  (</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">props</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> InstanceType</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  (</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">props</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> IVueRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">InstanceType</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  ()</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> IVueRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">InstanceType</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Converts a class properties to a composable .value Refs using ToRef vue type,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * also knows NOT to convert functions to .value Refs but to leave them as is.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> IVueRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  [</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> in</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> keyof</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">]</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">extends</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Function</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> ?</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ToRef</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">]&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Unwraps Ref Recursively, helps resolve fully the bare value types of any type T</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * because sometimes the Refs are returned as they are with \`.value\` from computeds,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * thus inferring nested ComputedRef&lt;ComputedRef&lt;ComputedRef&lt;Ref&gt;&gt;&gt; types, which</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * are difficult to fully resolve to bare values without this utility.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Also support Vue 3 Demi for vue-use library support.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> UnwrapRefRecursively</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Ref</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> |</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> DemiRef</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">  ?</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> UnwrapRefRecursively</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">value</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">]&gt;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">  :</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Helper type for Use type, unwraps any type of Vue 3 composable return object down to its bare types.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> UnwrapComposableRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Ref</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> |</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> DemiRef</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">  ?</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> UnwrapRefRecursively</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">  :</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">      [</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> in</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> keyof</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">]</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">extends</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Ref</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> |</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> DemiRef</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">        ?</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> UnwrapRefRecursively</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">]&gt;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">        :</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Fully unwraps to bare value types any Vue 3 composable return definition type.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Use</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Ref</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> |</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> DemiRef</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">  ?</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> UnwrapRefRecursively</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">  :</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> UnwrapComposableRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyFn</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> ?</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ReturnType</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Extracts object defined emit types by converting them to a plain interface</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ExtractEmitTypes</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Record</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  UnionToIntersection</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    RecordToUnion</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">      [</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> in</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> keyof</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">]</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">evt</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Parameters</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">]&gt;) </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">    }&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  &gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Extract properties as all assigned properties because they have defaults.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ExtractPropDefaultTypes</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">O</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  [</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> in</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> keyof</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> O</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">]</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ValueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">ExtractPropTypes</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">O</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;, </span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Extend slots interface T with prefixed &#39;before--&#39; &amp; &#39;after--&#39; slots to create fully extensible flexible slots.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ExtendSlots</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> PrefixKeys</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">before--</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">&amp;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  T</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> &amp;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  PrefixKeys</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">after--</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/** Helper Types. */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Any JavaScript function of any type.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyFn</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[]) </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Any JavaScript class of any type.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyClass</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> abstract</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[]) </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Descriptors map type.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Descriptors</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Map</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">PropertyDescriptor</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Computeds hash map type.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Computeds</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Record</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">ComputedRef</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Infer paramaters of a constructor function of a Class.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> InferredArgs</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> { </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> infer</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> P</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> }</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">  ?</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> P</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">  :</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> never</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Prefix keys of an interface T with a prefix P.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> PrefixKeys</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">P</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> string</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> |</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> undefined</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  [</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> in</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Extract</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">keyof</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> P</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> string</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> ?</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;"> \`</span><span style="--shiki-light:#CA1243;--shiki-dark:#F286C4;">\${</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">P</span><span style="--shiki-light:#CA1243;--shiki-dark:#F286C4;">}\${</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#CA1243;--shiki-dark:#F286C4;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">\`</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> :</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">]</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Get Interface&#39;s property&#39;s function arguments Parmeters&lt;F&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> IFnParameters</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Record</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  K</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> string</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Parameters</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Required</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Pick</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;&gt;[</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">]&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Get Interface&#39;s [T] property&#39;s [P] function arguments Parmeters&lt;F&gt; parameter by key [K]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> IFnParameter</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Record</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  P</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> keyof</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  K</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> number</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> FnParameter</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">ValueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">P</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;, </span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Get function arguments Parmeters&lt;F&gt; parameter by key K</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> FnParameter</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">F</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyFn</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Parameters</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">F</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;[</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Convert Union Type to Intersection Type.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> UnionToIntersection</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">U</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  U</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> ?</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">k</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> U</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> :</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> never</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">extends</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">k</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> infer</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> I</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">  ?</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> I</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">  :</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> never</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Convert Record to Union Type.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> RecordToUnion</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Record</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">keyof</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Gets object T property by key [K].</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ValueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Record</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;, </span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">];</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/** Types End. */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Store all descriptors for each class prototype processed by</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">see</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> {getAllClassDescriptors}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> const</span><span style="--shiki-light:#986801;--shiki-dark:#F6F6F4;"> descriptorsMap</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> Map</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Get descriptors of an entire class prototype ancestors chain as a Map.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Completely emulates JavaScript class inheritance chain for getters and setters.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">param</span><span style="--shiki-light:#E45649;--shiki-dark:#FFB86C;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> className</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">return</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> {Descriptors}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> getAllClassDescriptors</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">className</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Descriptors</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  /* Retrieve descriptors from cache */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (descriptorsMap.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">has</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(className)) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> descriptorsMap.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(className);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#F6F6F4;"> savedDescriptors</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Descriptors</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> Map</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> prototype </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> className</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">prototype</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  while</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (prototype.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">constructor</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> !==</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> Object) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">    Object.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">entries</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(Object.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">getOwnPropertyDescriptors</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(prototype)).</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">      ([</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">propertyName</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">currentDescriptor</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">]) </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">        const</span><span style="--shiki-light:#986801;--shiki-dark:#F6F6F4;"> savedDescriptor</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> savedDescriptors.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(propertyName);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        /** Emulate inheritance chain of getters and setters. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">          savedDescriptor </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">!==</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> currentDescriptor </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">          (currentDescriptor?.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">get</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> currentDescriptor?.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">        ) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">          /** Overwrite descriptors if they were already set. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">          if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (savedDescriptor?.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">            currentDescriptor.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">get</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> savedDescriptor?.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">          if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (savedDescriptor?.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">            currentDescriptor.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">set</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> savedDescriptor?.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">          /** Store descriptors. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">          savedDescriptors.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(propertyName, currentDescriptor);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">    );</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    /** Walk up the prototype ancestors chain. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">    prototype </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> Object.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">getPrototypeOf</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(prototype);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  /** Save descriptors in the descriptors map for each class. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  descriptorsMap.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(className, savedDescriptors);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> savedDescriptors;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Infinite Vue (ivue) class reactive initializer.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Converts class instance to a reactive object,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * where descriptors are converted to computeds.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * You can turn off computed behaviour by adding static</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * ivue object and setting the getter props to false.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * class ClassName {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *    static ivue = {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *      getter: false</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *    // .getter -&gt; will be a standard JS non-computed getter</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *    get getter () { return &#39;hello world&#39;; }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">param</span><span style="--shiki-light:#E45649;--shiki-dark:#FFB86C;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> className</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> Any Class</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">param</span><span style="--shiki-light:#E45649;--shiki-dark:#FFB86C;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> args</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> Class constructor arguments that you would pass to a \`new AnyClass(args...)\`</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">returns</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> {IVue&lt;T&gt;}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> ivue</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  className</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">  ...</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> InferredArgs</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> IVue</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#F6F6F4;"> descriptors</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Descriptors</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> getAllClassDescriptors</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(className);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#F6F6F4;"> computeds</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Computeds</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> |</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> descriptors?.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">size</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> ?</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {} </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#986801;--shiki-dark:#BF9EEE;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // @ts-expect-error Abstract class initialization</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#F6F6F4;"> vue</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> reactive</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> className</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">args));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  /** Setup descriptors as computeds. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  for</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#F6F6F4;">prop</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#986801;--shiki-dark:#F6F6F4;">descriptor</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">of</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> descriptors) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    /* If prop exists on static getter className.ivue[prop]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">     * We do not convert it to computed. Because sometimes</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">     * we want a normal getter. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> ((className </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)?.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">ivue</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">?.[prop] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">===</span><span style="--shiki-light:#986801;--shiki-dark:#BF9EEE;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">continue</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    /** Convert descriptor to computed. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">    Object.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">defineProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(vue, prop, {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">      get</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> descriptor.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">get</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">        ?</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">            prop </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> computeds</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">              ?</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> /** Get the existing computed, because we are in reactive scope, .value will auto unwrap itself. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">                computeds[prop]</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">              :</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> /** Create the computed and return it, because we are in reactive scope, .value will auto unwrap itself. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">                (computeds[prop] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> computed</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">                  get</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> descriptor.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">?.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(vue) </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">                  set</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> descriptor.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">?.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(vue),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">                } </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">))</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">        :</span><span style="--shiki-light:#986801;--shiki-dark:#BF9EEE;"> undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">      set</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> descriptor.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">?.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(vue),</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">      enumerable</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#986801;--shiki-dark:#BF9EEE;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">    });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  Object.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">defineProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(vue, </span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">toRefs</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">    get</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> ivueToRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(vue, descriptors </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Descriptors</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, computeds),</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">    enumerable</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#986801;--shiki-dark:#BF9EEE;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  /** Run ivue .init() initializer method, if it exists in the class. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">init</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> vue) vue.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">init</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> vue;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Store all props for each class prototype processed by:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">see</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> {getAllClassProperties}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">const</span><span style="--shiki-light:#986801;--shiki-dark:#F6F6F4;"> propsMap</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Map</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">object</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Set</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> Map</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Get properties of an entire class prototype ancestors chain as a Map.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> getAllClassProperties</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">obj</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> object</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Set</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  /* Retrieve props from cache */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (propsMap.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">has</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(obj.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> propsMap.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(obj.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#F6F6F4;"> originalConstructor</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> obj.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#F6F6F4;"> allProps</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Set</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> Set</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  do</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">    Object.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">getOwnPropertyNames</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(obj).</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">((</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">prop</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      /* &#39;caller&#39;, &#39;callee&#39;, &#39;arguments&#39;, &#39;constructor&#39; are</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">       * special object properties, so should be skipped. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">caller</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">callee</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">arguments</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">constructor</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">].</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">includes</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(prop)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">        allProps.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(prop);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">    });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">    obj </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> Object.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">getPrototypeOf</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(obj);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (obj.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">constructor</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> !==</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> Object);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  /** Save props in the props map. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  propsMap.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(originalConstructor, allProps);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> allProps;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * \`iref()\` is an alias for Vue ref() function but returns an unwrapped type without the .value</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * \`iref()\` does not alter the behavior of ref(), but simply transforms the type to an unwrapped raw value.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">param</span><span style="--shiki-light:#E45649;--shiki-dark:#FFB86C;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> val</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> T</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">returns</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> {T}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> const</span><span style="--shiki-light:#986801;--shiki-dark:#F6F6F4;"> iref</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> ref </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;(</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">?:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * \`ishallowRef()\` is an alias for Vue shallowRef() function but returns an unwrapped type without the .value</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * \`ishallowRef()\` does not alter the behavior of shallowRef(), but simply transforms the type to an unwrapped raw value.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">param</span><span style="--shiki-light:#E45649;--shiki-dark:#FFB86C;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> val</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> T</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">returns</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> {T}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> const</span><span style="--shiki-light:#986801;--shiki-dark:#F6F6F4;"> ishallowRef</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> shallowRef </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;(</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">?:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Three modes of operation:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * 1. \`iuse(useComposable(arg, arg2, arg3, ...))\` converts the return types of a Composable / Ref to pure raw unwrapped type definition.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Returns for all properties of an object an unwrapped raw type definition,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * unwraps direct Refs &amp; ComputedRefs as well down to their raw types.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * 2. \`iuse(useComposable, arg, arg2, arg3, ...)\` for cleaner syntax for #1, it does exactly the same thing but</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * here the TypeScript inference works for composable function arguments to assist you with intellisence,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * like they work for constructor arguments in the cause of \`ivue()\` core function,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * making the API cleaner to look at and make it compatible with how this function operates with classes, see #3.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * 3. \`iuse(AnyClass, ...args)\` If AnyClass is supplied and that class&#39;s arguments into \`iuse(AnyClass, ...args)\`,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * it returns an &#39;ivue(AnyClass, ...args).toRefs()\` object for all properties but casts</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * their types as raw (no-Ref) types to fit with reactive() structure of the ivue class context.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> iuse</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyClass</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> |</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyFn</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> |</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Object</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> |</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  classFunctionObject</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">?:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">  ...</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyClass</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">    ?</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> InferredArgs</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">    :</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyFn</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">    ?</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Parameters</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[]) </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> ?</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">    :</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyClass</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> ?</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> InstanceType</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Use</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> classFunctionObject </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">===</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">function</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">    ?</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> isClass</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(classFunctionObject)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">      ?</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> /** Run IVUE but return full Refs, yet property &#39;true&#39; makes \`.toRefs(true)\` cast the type to the unwrapped raw type definition instead of a \`.value\` Ref. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">        ivue</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">          classFunctionObject </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyClass</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> ?</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> :</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">          ...</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(args </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> InferredArgs</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyClass</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> ?</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">        ).</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">toRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#986801;--shiki-dark:#BF9EEE;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">      :</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> /** Run Vue 3 Standard Composable but also unwrap it to bare raw types. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">        (classFunctionObject </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyFn</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)(</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">          ...</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(args </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Parameters</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyFn</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> ?</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyFn</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">        )</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">    :</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (classFunctionObject </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> unknown</span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;"> as</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Use</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;) </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/** Unwrap any other Object or any type down to its bare types. */</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Convert reactive ivue class to Vue 3 refs.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">param</span><span style="--shiki-light:#E45649;--shiki-dark:#FFB86C;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> vue</span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">see</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> IVue</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">param</span><span style="--shiki-light:#E45649;--shiki-dark:#FFB86C;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> descriptors</span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">see</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> Descriptors</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">param</span><span style="--shiki-light:#E45649;--shiki-dark:#FFB86C;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> computeds</span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">see</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> Computeds</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">returns</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> {ExtendWithToRefs&lt;T&gt;[&#39;toRefs&#39;]}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> ivueToRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> AnyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  vue</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> IVue</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  descriptors</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Descriptors</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  computeds</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Computeds</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> IVueToRefsFn</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    props</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">?:</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">keyof</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> InstanceType</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;)[] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">|</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    unwrap</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">?:</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> boolean</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> /** This property helps with TypeScript function definition overloading of return types and is not being used inside the function itself. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  )</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> /** </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">see</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> {ReturnType&lt;IVueToRefsFn&lt;T&gt;&gt;}</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    /** Resulting refs store. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#F6F6F4;"> result</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Record</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> |</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> number</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> |</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> symbol</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    /** Output specific props only, if props are specified. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (Array.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">isArray</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(props)) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">      for</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> i </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#986801;--shiki-dark:#BF9EEE;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">; i </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> props.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">; i</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">        const</span><span style="--shiki-light:#986801;--shiki-dark:#F6F6F4;"> prop</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> props[i] </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        /** Handle descriptors. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (descriptors.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">has</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(prop)) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">          if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (prop </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> computeds) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            /** Return vue computed with .value from computeds store. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">            result[prop] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> computeds[prop];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">          } </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            /** Initialize &amp; store vue computed. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">            const</span><span style="--shiki-light:#986801;--shiki-dark:#F6F6F4;"> descriptor</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> descriptors.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(prop);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">            result[prop] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> computeds[prop] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> computed</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">              get</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> descriptor?.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">?.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(vue) </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">              set</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> descriptor?.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">?.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(vue),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">            } </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">          }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">          /** Handle methods. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">          if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> vue[prop] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">===</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">function</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            /** Bind method to vue, makes method destructuring point to right instance. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">            result[prop] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> vue[prop].</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(vue);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">          } </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">            /** Convert simple reactive prop to a Ref. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">            result[prop] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> toRef</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(vue, prop);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">          }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      /** Convert all props to refs and leave functions as is. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">      let</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> allProps</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> null</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> |</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Set</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> Set</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">getAllClassProperties</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(vue));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      /** Convert descriptors (non enumerable by default in JS). */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">      descriptors.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">((</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">descriptor</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">prop</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (prop </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> computeds) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">          /** Return vue computed with .value from computeds store. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">          result[prop] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> computeds[prop];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">          /** Initialize vue computed ref &amp; store it in result. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">          result[prop] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> computeds[prop] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> computed</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">            get</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> descriptor.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">?.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(vue) </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">            set</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> descriptor.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">?.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(vue),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">          } </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">        }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        /** Delete descriptor from props as it was already processed. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">        allProps?.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">delete</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(prop </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">      });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">      allProps.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">((</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">prop</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> vue[prop] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">===</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">function</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">          /** Bind method to vue, makes method destructuring point to right instance. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">          result[prop] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> vue[prop].</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(vue);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">          /** Convert simple reactive prop to a Ref. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">          result[prop] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> toRef</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(vue, prop);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">      });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      /** Memory optimization. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">      allProps </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#986801;--shiki-dark:#BF9EEE;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Vue props interface in defineComponent() style.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> VuePropsObject</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Record</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  string</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  { type</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">; default</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">?:</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">; required</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">?:</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Vue Props with default properties declared as existing and having values.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> type</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> VuePropsWithDefaults</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> VuePropsObject</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  [</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> in</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> keyof</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">]</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">    type</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">][</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">type</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">    default</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">[</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">][</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">default</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">    required</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">?:</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Determines if the value is a JavaScript Class.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Note that class is a class function in JavaScript.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">param</span><span style="--shiki-light:#E45649;--shiki-dark:#FFB86C;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> val</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> Any value</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">returns</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> boolean If it&#39;s a JavaScript Class returns true</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> isClass</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">val</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> val </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">!==</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">function</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">return</span><span style="--shiki-light:#986801;--shiki-dark:#BF9EEE;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// Not a function, so not a class function either</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">!</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">prototype</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">return</span><span style="--shiki-light:#986801;--shiki-dark:#BF9EEE;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// Arrow function, so not a class</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">  // Finally -&gt; distinguish between a normal function and a class function</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (Object.</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">getOwnPropertyDescriptor</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(val, </span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">prototype</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)?.</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">writable</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">    // Has writable prototype</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#BF9EEE;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// Normal function</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#BF9EEE;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">// Class -&gt; Not a function</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Creates props with defaults in defineComponent() style.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * Merge defaults regular object with Vue types object</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * declared in defineComponent() style.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * This is made so that the defaults can be declared &quot;as they are&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * without requiring objects to be function callbacks returning an object.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * // You don&#39;t need to wrap objects in () =&gt; ({ nest: { nest :{} } })</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * // You can just delcare them normally.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * const defaults = {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *    nest: {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *      nest</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * This function will create the Vue expected callbacks for Objects, Arrays &amp; Classes</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * but leave primitive properties and functions intact so that</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * the final object is fully defineComponent() style compatible.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">param</span><span style="--shiki-light:#E45649;--shiki-dark:#FFB86C;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> defaults</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> Regular object of default key -&gt; values</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">param</span><span style="--shiki-light:#E45649;--shiki-dark:#FFB86C;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> typedProps</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> Props declared in defineComponent() style with type and possibly required declared, but without default</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> * </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">returns</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> Props declared in defineComponent() style with all properties having default property declared.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;"> propsWithDefaults</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> VuePropsObject</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  defaults</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Record</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  typedProps</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> VuePropsWithDefaults</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  for</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">const</span><span style="--shiki-light:#986801;--shiki-dark:#F6F6F4;"> prop</span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> typedProps) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> defaults?.[prop] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">===</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#E7EE98;">object</span><span style="--shiki-light:#50A14F;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> defaults?.[prop] </span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;">!==</span><span style="--shiki-light:#986801;--shiki-dark:#BF9EEE;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">      /** Handle Arrays &amp; Objects -&gt; wrap them with an arrow function. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">      typedProps[prop].</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">default</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> defaults?.[prop];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">isClass</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">(defaults?.[prop])) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        /** Handle JavaScript Classes -&gt; wrap them with an arrow function */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">        typedProps[prop].</span><span style="--shiki-light:#4078F2;--shiki-dark:#62E884;">default</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> defaults?.[prop];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">      } </span><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">        /** Handle JavaScript Function And All primitive properties -&gt; output directly */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">        typedProps[prop].</span><span style="--shiki-light:#E45649;--shiki-dark:#F6F6F4;">default</span><span style="--shiki-light:#0184BC;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> defaults?.[prop];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> typedProps </span><span style="--shiki-light:#383A42;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#C18401;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> VuePropsWithDefaults</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7B7F8B;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">/** Necessary ivue.ts to be treated as a module. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#383A42;--shiki-dark:#F6F6F4;"> {};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br><span class="line-number">213</span><br><span class="line-number">214</span><br><span class="line-number">215</span><br><span class="line-number">216</span><br><span class="line-number">217</span><br><span class="line-number">218</span><br><span class="line-number">219</span><br><span class="line-number">220</span><br><span class="line-number">221</span><br><span class="line-number">222</span><br><span class="line-number">223</span><br><span class="line-number">224</span><br><span class="line-number">225</span><br><span class="line-number">226</span><br><span class="line-number">227</span><br><span class="line-number">228</span><br><span class="line-number">229</span><br><span class="line-number">230</span><br><span class="line-number">231</span><br><span class="line-number">232</span><br><span class="line-number">233</span><br><span class="line-number">234</span><br><span class="line-number">235</span><br><span class="line-number">236</span><br><span class="line-number">237</span><br><span class="line-number">238</span><br><span class="line-number">239</span><br><span class="line-number">240</span><br><span class="line-number">241</span><br><span class="line-number">242</span><br><span class="line-number">243</span><br><span class="line-number">244</span><br><span class="line-number">245</span><br><span class="line-number">246</span><br><span class="line-number">247</span><br><span class="line-number">248</span><br><span class="line-number">249</span><br><span class="line-number">250</span><br><span class="line-number">251</span><br><span class="line-number">252</span><br><span class="line-number">253</span><br><span class="line-number">254</span><br><span class="line-number">255</span><br><span class="line-number">256</span><br><span class="line-number">257</span><br><span class="line-number">258</span><br><span class="line-number">259</span><br><span class="line-number">260</span><br><span class="line-number">261</span><br><span class="line-number">262</span><br><span class="line-number">263</span><br><span class="line-number">264</span><br><span class="line-number">265</span><br><span class="line-number">266</span><br><span class="line-number">267</span><br><span class="line-number">268</span><br><span class="line-number">269</span><br><span class="line-number">270</span><br><span class="line-number">271</span><br><span class="line-number">272</span><br><span class="line-number">273</span><br><span class="line-number">274</span><br><span class="line-number">275</span><br><span class="line-number">276</span><br><span class="line-number">277</span><br><span class="line-number">278</span><br><span class="line-number">279</span><br><span class="line-number">280</span><br><span class="line-number">281</span><br><span class="line-number">282</span><br><span class="line-number">283</span><br><span class="line-number">284</span><br><span class="line-number">285</span><br><span class="line-number">286</span><br><span class="line-number">287</span><br><span class="line-number">288</span><br><span class="line-number">289</span><br><span class="line-number">290</span><br><span class="line-number">291</span><br><span class="line-number">292</span><br><span class="line-number">293</span><br><span class="line-number">294</span><br><span class="line-number">295</span><br><span class="line-number">296</span><br><span class="line-number">297</span><br><span class="line-number">298</span><br><span class="line-number">299</span><br><span class="line-number">300</span><br><span class="line-number">301</span><br><span class="line-number">302</span><br><span class="line-number">303</span><br><span class="line-number">304</span><br><span class="line-number">305</span><br><span class="line-number">306</span><br><span class="line-number">307</span><br><span class="line-number">308</span><br><span class="line-number">309</span><br><span class="line-number">310</span><br><span class="line-number">311</span><br><span class="line-number">312</span><br><span class="line-number">313</span><br><span class="line-number">314</span><br><span class="line-number">315</span><br><span class="line-number">316</span><br><span class="line-number">317</span><br><span class="line-number">318</span><br><span class="line-number">319</span><br><span class="line-number">320</span><br><span class="line-number">321</span><br><span class="line-number">322</span><br><span class="line-number">323</span><br><span class="line-number">324</span><br><span class="line-number">325</span><br><span class="line-number">326</span><br><span class="line-number">327</span><br><span class="line-number">328</span><br><span class="line-number">329</span><br><span class="line-number">330</span><br><span class="line-number">331</span><br><span class="line-number">332</span><br><span class="line-number">333</span><br><span class="line-number">334</span><br><span class="line-number">335</span><br><span class="line-number">336</span><br><span class="line-number">337</span><br><span class="line-number">338</span><br><span class="line-number">339</span><br><span class="line-number">340</span><br><span class="line-number">341</span><br><span class="line-number">342</span><br><span class="line-number">343</span><br><span class="line-number">344</span><br><span class="line-number">345</span><br><span class="line-number">346</span><br><span class="line-number">347</span><br><span class="line-number">348</span><br><span class="line-number">349</span><br><span class="line-number">350</span><br><span class="line-number">351</span><br><span class="line-number">352</span><br><span class="line-number">353</span><br><span class="line-number">354</span><br><span class="line-number">355</span><br><span class="line-number">356</span><br><span class="line-number">357</span><br><span class="line-number">358</span><br><span class="line-number">359</span><br><span class="line-number">360</span><br><span class="line-number">361</span><br><span class="line-number">362</span><br><span class="line-number">363</span><br><span class="line-number">364</span><br><span class="line-number">365</span><br><span class="line-number">366</span><br><span class="line-number">367</span><br><span class="line-number">368</span><br><span class="line-number">369</span><br><span class="line-number">370</span><br><span class="line-number">371</span><br><span class="line-number">372</span><br><span class="line-number">373</span><br><span class="line-number">374</span><br><span class="line-number">375</span><br><span class="line-number">376</span><br><span class="line-number">377</span><br><span class="line-number">378</span><br><span class="line-number">379</span><br><span class="line-number">380</span><br><span class="line-number">381</span><br><span class="line-number">382</span><br><span class="line-number">383</span><br><span class="line-number">384</span><br><span class="line-number">385</span><br><span class="line-number">386</span><br><span class="line-number">387</span><br><span class="line-number">388</span><br><span class="line-number">389</span><br><span class="line-number">390</span><br><span class="line-number">391</span><br><span class="line-number">392</span><br><span class="line-number">393</span><br><span class="line-number">394</span><br><span class="line-number">395</span><br><span class="line-number">396</span><br><span class="line-number">397</span><br><span class="line-number">398</span><br><span class="line-number">399</span><br><span class="line-number">400</span><br><span class="line-number">401</span><br><span class="line-number">402</span><br><span class="line-number">403</span><br><span class="line-number">404</span><br><span class="line-number">405</span><br><span class="line-number">406</span><br><span class="line-number">407</span><br><span class="line-number">408</span><br><span class="line-number">409</span><br><span class="line-number">410</span><br><span class="line-number">411</span><br><span class="line-number">412</span><br><span class="line-number">413</span><br><span class="line-number">414</span><br><span class="line-number">415</span><br><span class="line-number">416</span><br><span class="line-number">417</span><br><span class="line-number">418</span><br><span class="line-number">419</span><br><span class="line-number">420</span><br><span class="line-number">421</span><br><span class="line-number">422</span><br><span class="line-number">423</span><br><span class="line-number">424</span><br><span class="line-number">425</span><br><span class="line-number">426</span><br><span class="line-number">427</span><br><span class="line-number">428</span><br><span class="line-number">429</span><br><span class="line-number">430</span><br><span class="line-number">431</span><br><span class="line-number">432</span><br><span class="line-number">433</span><br><span class="line-number">434</span><br><span class="line-number">435</span><br><span class="line-number">436</span><br><span class="line-number">437</span><br><span class="line-number">438</span><br><span class="line-number">439</span><br><span class="line-number">440</span><br><span class="line-number">441</span><br><span class="line-number">442</span><br><span class="line-number">443</span><br><span class="line-number">444</span><br><span class="line-number">445</span><br><span class="line-number">446</span><br><span class="line-number">447</span><br><span class="line-number">448</span><br><span class="line-number">449</span><br><span class="line-number">450</span><br><span class="line-number">451</span><br><span class="line-number">452</span><br><span class="line-number">453</span><br><span class="line-number">454</span><br><span class="line-number">455</span><br><span class="line-number">456</span><br><span class="line-number">457</span><br><span class="line-number">458</span><br><span class="line-number">459</span><br><span class="line-number">460</span><br><span class="line-number">461</span><br><span class="line-number">462</span><br><span class="line-number">463</span><br><span class="line-number">464</span><br><span class="line-number">465</span><br><span class="line-number">466</span><br><span class="line-number">467</span><br><span class="line-number">468</span><br><span class="line-number">469</span><br><span class="line-number">470</span><br><span class="line-number">471</span><br><span class="line-number">472</span><br><span class="line-number">473</span><br><span class="line-number">474</span><br><span class="line-number">475</span><br><span class="line-number">476</span><br><span class="line-number">477</span><br><span class="line-number">478</span><br><span class="line-number">479</span><br><span class="line-number">480</span><br><span class="line-number">481</span><br><span class="line-number">482</span><br><span class="line-number">483</span><br><span class="line-number">484</span><br><span class="line-number">485</span><br><span class="line-number">486</span><br><span class="line-number">487</span><br><span class="line-number">488</span><br><span class="line-number">489</span><br><span class="line-number">490</span><br><span class="line-number">491</span><br><span class="line-number">492</span><br><span class="line-number">493</span><br><span class="line-number">494</span><br><span class="line-number">495</span><br><span class="line-number">496</span><br><span class="line-number">497</span><br><span class="line-number">498</span><br><span class="line-number">499</span><br><span class="line-number">500</span><br><span class="line-number">501</span><br><span class="line-number">502</span><br><span class="line-number">503</span><br><span class="line-number">504</span><br><span class="line-number">505</span><br><span class="line-number">506</span><br><span class="line-number">507</span><br><span class="line-number">508</span><br><span class="line-number">509</span><br><span class="line-number">510</span><br><span class="line-number">511</span><br><span class="line-number">512</span><br><span class="line-number">513</span><br><span class="line-number">514</span><br><span class="line-number">515</span><br><span class="line-number">516</span><br><span class="line-number">517</span><br><span class="line-number">518</span><br><span class="line-number">519</span><br><span class="line-number">520</span><br><span class="line-number">521</span><br><span class="line-number">522</span><br><span class="line-number">523</span><br><span class="line-number">524</span><br><span class="line-number">525</span><br><span class="line-number">526</span><br><span class="line-number">527</span><br><span class="line-number">528</span><br><span class="line-number">529</span><br><span class="line-number">530</span><br><span class="line-number">531</span><br><span class="line-number">532</span><br><span class="line-number">533</span><br><span class="line-number">534</span><br><span class="line-number">535</span><br><span class="line-number">536</span><br><span class="line-number">537</span><br><span class="line-number">538</span><br><span class="line-number">539</span><br><span class="line-number">540</span><br><span class="line-number">541</span><br><span class="line-number">542</span><br><span class="line-number">543</span><br><span class="line-number">544</span><br><span class="line-number">545</span><br><span class="line-number">546</span><br><span class="line-number">547</span><br><span class="line-number">548</span><br><span class="line-number">549</span><br><span class="line-number">550</span><br><span class="line-number">551</span><br><span class="line-number">552</span><br><span class="line-number">553</span><br></div></div></div></div></details><p>Or <a href="https://github.com/infinite-system/ivue/blob/main/lib/ivue.ts" target="_blank" rel="noreferrer">Copy from GitHub</a></p><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>This installation path is recommended only if you quickly want to tinker with the internals of ivue, as you won&#39;t be getting the latest updates. Also note that this code comes from github <code>main</code> branch latest which might also be in beta and not fully published to <code>npm</code>.</p></div>`,10),h=[l];function k(e,p,r,y,F,d){return i(),a("div",null,h)}const o=s(t,[["render",k]]);export{c as __pageData,o as default};
